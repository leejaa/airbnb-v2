{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/leejahun/practice/airbnb-v2/apollo/client.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Head from \"next/head\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport fetch from \"isomorphic-unfetch\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport jwtDecode from \"jwt-decode\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from \"apollo-link\";\nimport cookie from \"cookie\";\n\nvar isServer = function isServer() {\n  return false;\n};\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\n\nexport function withApollo(PageComponent) {\n  var _this = this;\n\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        serverAccessToken = _ref2.serverAccessToken,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"serverAccessToken\", \"apolloState\"]);\n\n    if (!isServer() && !getAccessToken()) {\n      setAccessToken(serverAccessToken);\n    }\n\n    var client = apolloClient || initApolloClient(apolloState);\n    return __jsx(PageComponent, _extends({}, pageProps, {\n      apolloClient: client,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 12\n      }\n    }));\n  };\n\n  if (true) {\n    // Find correct display name\n    var displayName = PageComponent.displayName || PageComponent.name || \"Component\"; // Warn if old way of installing apollo is used\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    } // Set correct display name for devtools\n\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = function _callee(ctx) {\n      var AppTree, _ctx$ctx, req, res, serverAccessToken, cookies, response, data, apolloClient, pageProps, _await$import, getDataFromTree, apolloState;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              AppTree = ctx.AppTree, _ctx$ctx = ctx.ctx, req = _ctx$ctx.req, res = _ctx$ctx.res;\n              serverAccessToken = \"\";\n\n              if (!isServer()) {\n                _context.next = 12;\n                break;\n              }\n\n              // const cookies : any = cookie.parse(`${req.headers.cookie}`);\n              // if (cookies.jid) {\n              //   const response = await fetch(IS_PRODUCTION ? `${API_PRODUCTION}/refresh_token` : `${API_DEVELOPMENT}/refresh_token`, {\n              //     method: \"POST\",\n              //     credentials: \"include\",\n              //     headers: {\n              //       cookie: \"jid=\" + cookies.jid\n              //     }\n              //   });\n              //   const data = await response.json();\n              //   serverAccessToken = data.accessToken;\n              // }\n              cookies = cookie.parse(\"\".concat(req.headers.cookie));\n\n              if (!cookies.jid) {\n                _context.next = 12;\n                break;\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(fetch(\"http://localhost:3000/refresh_token\", {\n                method: \"POST\",\n                credentials: \"include\",\n                headers: {\n                  cookie: \"jid=\" + cookies.jid\n                }\n              }));\n\n            case 7:\n              response = _context.sent;\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 10:\n              data = _context.sent;\n              serverAccessToken = data.accessToken;\n\n            case 12:\n              // Run all GraphQL queries in the component tree\n              // and extract the resulting data\n              apolloClient = ctx.ctx.apolloClient = initApolloClient({}, serverAccessToken);\n\n              if (!PageComponent.getInitialProps) {\n                _context.next = 19;\n                break;\n              }\n\n              _context.next = 16;\n              return _regeneratorRuntime.awrap(PageComponent.getInitialProps(ctx));\n\n            case 16:\n              _context.t0 = _context.sent;\n              _context.next = 20;\n              break;\n\n            case 19:\n              _context.t0 = {};\n\n            case 20:\n              pageProps = _context.t0;\n\n              if (!false) {\n                _context.next = 38;\n                break;\n              }\n\n              if (!(res && res.finished)) {\n                _context.next = 24;\n                break;\n              }\n\n              return _context.abrupt(\"return\", {});\n\n            case 24:\n              if (!ssr) {\n                _context.next = 37;\n                break;\n              }\n\n              _context.prev = 25;\n              _context.next = 28;\n              return _regeneratorRuntime.awrap(import(\"@apollo/react-ssr\"));\n\n            case 28:\n              _await$import = _context.sent;\n              getDataFromTree = _await$import.getDataFromTree;\n              _context.next = 32;\n              return _regeneratorRuntime.awrap(getDataFromTree(__jsx(AppTree, {\n                pageProps: _objectSpread({}, pageProps, {\n                  apolloClient: apolloClient\n                }),\n                apolloClient: apolloClient,\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 15\n                }\n              })));\n\n            case 32:\n              _context.next = 37;\n              break;\n\n            case 34:\n              _context.prev = 34;\n              _context.t1 = _context[\"catch\"](25);\n              // Prevent Apollo Client GraphQL errors from crashing SSR.\n              // Handle them in components via the data.error prop:\n              // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n              console.error(\"Error while running `getDataFromTree`\", _context.t1);\n\n            case 37:\n              // getDataFromTree does not call componentWillUnmount\n              // head side effect therefore need to be cleared manually\n              Head.rewind();\n\n            case 38:\n              // Extract query data from the Apollo store\n              apolloState = apolloClient.cache.extract();\n              return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                apolloState: apolloState,\n                serverAccessToken: serverAccessToken\n              }));\n\n            case 40:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[25, 34]], Promise);\n    };\n  }\n\n  return WithApollo;\n}\nvar apolloClient = null;\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\n\nfunction initApolloClient(initState, serverAccessToken) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (isServer()) {\n    return createApolloClient(initState, serverAccessToken);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    // setAccessToken(cookie.parse(document.cookie).test);\n    apolloClient = createApolloClient(initState);\n  }\n\n  return apolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\n\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var serverAccessToken = arguments.length > 1 ? arguments[1] : undefined;\n  var httpLink = new HttpLink({\n    uri: 'http://localhost:3000/api',\n    credentials: \"include\",\n    fetch: fetch\n  });\n  var refreshLink = new TokenRefreshLink({\n    accessTokenField: \"accessToken\",\n    isTokenValidOrUndefined: function isTokenValidOrUndefined() {\n      var token = getAccessToken();\n\n      if (!token) {\n        return true;\n      }\n\n      try {\n        var _jwtDecode = jwtDecode(token),\n            exp = _jwtDecode.exp;\n\n        if (Date.now() >= exp * 1000) {\n          return false;\n        } else {\n          return true;\n        }\n      } catch (_unused) {\n        return false;\n      }\n    },\n    fetchAccessToken: function fetchAccessToken() {\n      return fetch(\"http://localhost:3000/api\", {\n        method: \"POST\",\n        credentials: \"include\"\n      });\n    },\n    handleFetch: function handleFetch(accessToken) {\n      setAccessToken(accessToken);\n    },\n    handleError: function handleError(err) {\n      console.warn(\"Your refresh token is invalid. Try to relogin\");\n      console.error(err);\n    }\n  });\n  var authLink = setContext(function (_request, _ref3) {\n    var headers = _ref3.headers;\n    var token = isServer() ? serverAccessToken : getAccessToken();\n    return {\n      headers: _objectSpread({}, headers, {\n        authorization: token ? \"bearer \".concat(token) : \"\"\n      })\n    };\n  });\n  var errorLink = onError(function (_ref4) {\n    var graphQLErrors = _ref4.graphQLErrors,\n        networkError = _ref4.networkError;\n    console.log(graphQLErrors);\n    console.log(networkError);\n  });\n  return new ApolloClient({\n    ssrMode: false,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: ApolloLink.from([refreshLink, authLink, errorLink, httpLink]),\n    cache: new InMemoryCache().restore(initialState),\n    connectToDevTools: true\n  });\n}","map":{"version":3,"sources":["/Users/leejahun/practice/airbnb-v2/apollo/client.tsx"],"names":["React","Head","ApolloClient","InMemoryCache","HttpLink","setContext","fetch","TokenRefreshLink","jwtDecode","getAccessToken","setAccessToken","onError","ApolloLink","cookie","isServer","withApollo","PageComponent","ssr","WithApollo","apolloClient","serverAccessToken","apolloState","pageProps","client","initApolloClient","displayName","name","console","warn","getInitialProps","ctx","AppTree","req","res","cookies","parse","headers","jid","method","credentials","response","json","data","accessToken","finished","getDataFromTree","error","rewind","cache","extract","initState","createApolloClient","initialState","httpLink","uri","refreshLink","accessTokenField","isTokenValidOrUndefined","token","exp","Date","now","fetchAccessToken","handleFetch","handleError","err","authLink","_request","authorization","errorLink","graphQLErrors","networkError","log","ssrMode","link","from","restore","connectToDevTools"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,YAAT,QAA6B,eAA7B;AAEA,SAASC,aAAT,QAAqD,uBAArD;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,eAA/C;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,UAAT,QAA2B,aAA3B;AAEA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA,CAAjB;AAEA;;;;;;;;;;AAQA,OAAO,SAASC,UAAT,CAAoBC,aAApB,EAA6D;AAAA;;AAAA,iFAAJ,EAAI;AAAA,sBAAnBC,GAAmB;AAAA,MAAnBA,GAAmB,yBAAb,IAAa;;AAClE,MAAMC,UAAU,GAAG,SAAbA,UAAa,QAKR;AAAA,QAJTC,YAIS,SAJTA,YAIS;AAAA,QAHTC,iBAGS,SAHTA,iBAGS;AAAA,QAFTC,WAES,SAFTA,WAES;AAAA,QADNC,SACM;;AACT,QAAI,CAACR,QAAQ,EAAT,IAAe,CAACL,cAAc,EAAlC,EAAsC;AACpCC,MAAAA,cAAc,CAACU,iBAAD,CAAd;AACD;;AACD,QAAMG,MAAM,GAAGJ,YAAY,IAAIK,gBAAgB,CAACH,WAAD,CAA/C;AACA,WAAO,MAAC,aAAD,eAAmBC,SAAnB;AAA8B,MAAA,YAAY,EAAEC,MAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAXD;;AAYA,YAA2C;AACzC;AACA,QAAME,WAAW,GACfT,aAAa,CAACS,WAAd,IAA6BT,aAAa,CAACU,IAA3C,IAAmD,WADrD,CAFyC,CAKzC;;AACA,QAAID,WAAW,KAAK,KAApB,EAA2B;AACzBE,MAAAA,OAAO,CAACC,IAAR,CAAa,qDAAb;AACD,KARwC,CAUzC;;;AACAV,IAAAA,UAAU,CAACO,WAAX,wBAAuCA,WAAvC;AACD;;AAED,MAAIR,GAAG,IAAID,aAAa,CAACa,eAAzB,EAA0C;AACxCX,IAAAA,UAAU,CAACW,eAAX,GAA6B,iBAAOC,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEzBC,cAAAA,OAFyB,GAIvBD,GAJuB,CAEzBC,OAFyB,aAIvBD,GAJuB,CAGzBA,GAHyB,EAGlBE,GAHkB,YAGlBA,GAHkB,EAGbC,GAHa,YAGbA,GAHa;AAMvBb,cAAAA,iBANuB,GAMH,EANG;;AAAA,mBAQvBN,QAAQ,EARe;AAAA;AAAA;AAAA;;AASzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEMoB,cAAAA,OAtBmB,GAsBJrB,MAAM,CAACsB,KAAP,WAAgBH,GAAG,CAACI,OAAJ,CAAYvB,MAA5B,EAtBI;;AAAA,mBAuBrBqB,OAAO,CAACG,GAvBa;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAwBA/B,KAAK,wCAAwC;AAClEgC,gBAAAA,MAAM,EAAE,MAD0D;AAElEC,gBAAAA,WAAW,EAAE,SAFqD;AAGlEH,gBAAAA,OAAO,EAAE;AACPvB,kBAAAA,MAAM,EAAE,SAASqB,OAAO,CAACG;AADlB;AAHyD,eAAxC,CAxBL;;AAAA;AAwBjBG,cAAAA,QAxBiB;AAAA;AAAA,+CA+BJA,QAAQ,CAACC,IAAT,EA/BI;;AAAA;AA+BjBC,cAAAA,IA/BiB;AAgCvBtB,cAAAA,iBAAiB,GAAGsB,IAAI,CAACC,WAAzB;;AAhCuB;AAoC3B;AACA;AACMxB,cAAAA,YAtCqB,GAsCLW,GAAG,CAACA,GAAJ,CAAQX,YAAR,GAAuBK,gBAAgB,CAC3D,EAD2D,EAE3DJ,iBAF2D,CAtClC;;AAAA,mBA2CTJ,aAAa,CAACa,eA3CL;AAAA;AAAA;AAAA;;AAAA;AAAA,+CA4CjBb,aAAa,CAACa,eAAd,CAA8BC,GAA9B,CA5CiB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,4BA6CvB,EA7CuB;;AAAA;AA2CrBR,cAAAA,SA3CqB;;AAAA;AAAA;AAAA;AAAA;;AAAA,oBAmDrBW,GAAG,IAAIA,GAAG,CAACW,QAnDU;AAAA;AAAA;AAAA;;AAAA,+CAoDhB,EApDgB;;AAAA;AAAA,mBAuDrB3B,GAvDqB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,+CA0Da,OAAO,mBAAP,CA1Db;;AAAA;AAAA;AA0Db4B,cAAAA,eA1Da,iBA0DbA,eA1Da;AAAA;AAAA,+CA2DfA,eAAe,CACnB,MAAC,OAAD;AACE,gBAAA,SAAS,oBACJvB,SADI;AAEPH,kBAAAA,YAAY,EAAZA;AAFO,kBADX;AAKE,gBAAA,YAAY,EAAEA,YALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADmB,CA3DA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqErB;AACA;AACA;AACAQ,cAAAA,OAAO,CAACmB,KAAR,CAAc,uCAAd;;AAxEqB;AA4EzB;AACA;AACA7C,cAAAA,IAAI,CAAC8C,MAAL;;AA9EyB;AAiF3B;AACM1B,cAAAA,WAlFqB,GAkFPF,YAAY,CAAC6B,KAAb,CAAmBC,OAAnB,EAlFO;AAAA,iEAqFtB3B,SArFsB;AAsFzBD,gBAAAA,WAAW,EAAXA,WAtFyB;AAuFzBD,gBAAAA,iBAAiB,EAAjBA;AAvFyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA7B;AA0FD;;AAED,SAAOF,UAAP;AACD;AAED,IAAIC,YAAwD,GAAG,IAA/D;AAEA;;;;;AAIA,SAASK,gBAAT,CAA0B0B,SAA1B,EAA0C9B,iBAA1C,EAAsE;AACpE;AACA;AACA,MAAIN,QAAQ,EAAZ,EAAgB;AACd,WAAOqC,kBAAkB,CAACD,SAAD,EAAY9B,iBAAZ,CAAzB;AACD,GALmE,CAOpE;;;AACA,MAAI,CAACD,YAAL,EAAmB;AACjB;AACAA,IAAAA,YAAY,GAAGgC,kBAAkB,CAACD,SAAD,CAAjC;AACD;;AAED,SAAO/B,YAAP;AACD;AAED;;;;;;;AAKA,SAASgC,kBAAT,GAA2E;AAAA,MAA/CC,YAA+C,uEAAhC,EAAgC;AAAA,MAA5BhC,iBAA4B;AACzE,MAAMiC,QAAQ,GAAG,IAAIjD,QAAJ,CAAa;AAC5BkD,IAAAA,GAAG,EAAE,2BADuB;AAE5Bf,IAAAA,WAAW,EAAE,SAFe;AAG5BjC,IAAAA,KAAK,EAALA;AAH4B,GAAb,CAAjB;AAMA,MAAMiD,WAAW,GAAG,IAAIhD,gBAAJ,CAAqB;AACvCiD,IAAAA,gBAAgB,EAAE,aADqB;AAEvCC,IAAAA,uBAAuB,EAAE,mCAAM;AAC7B,UAAMC,KAAK,GAAGjD,cAAc,EAA5B;;AAEA,UAAI,CAACiD,KAAL,EAAY;AACV,eAAO,IAAP;AACD;;AAED,UAAI;AAAA,yBACclD,SAAS,CAACkD,KAAD,CADvB;AAAA,YACMC,GADN,cACMA,GADN;;AAEF,YAAIC,IAAI,CAACC,GAAL,MAAcF,GAAG,GAAG,IAAxB,EAA8B;AAC5B,iBAAO,KAAP;AACD,SAFD,MAEO;AACL,iBAAO,IAAP;AACD;AACF,OAPD,CAOE,gBAAM;AACN,eAAO,KAAP;AACD;AACF,KAnBsC;AAoBvCG,IAAAA,gBAAgB,EAAE,4BAAM;AACtB,aAAOxD,KAAK,8BAA8B;AACxCgC,QAAAA,MAAM,EAAE,MADgC;AAExCC,QAAAA,WAAW,EAAE;AAF2B,OAA9B,CAAZ;AAID,KAzBsC;AA0BvCwB,IAAAA,WAAW,EAAE,qBAAApB,WAAW,EAAI;AAC1BjC,MAAAA,cAAc,CAACiC,WAAD,CAAd;AACD,KA5BsC;AA6BvCqB,IAAAA,WAAW,EAAE,qBAAAC,GAAG,EAAI;AAClBtC,MAAAA,OAAO,CAACC,IAAR,CAAa,+CAAb;AACAD,MAAAA,OAAO,CAACmB,KAAR,CAAcmB,GAAd;AACD;AAhCsC,GAArB,CAApB;AAmCA,MAAMC,QAAQ,GAAG7D,UAAU,CAAC,UAAC8D,QAAD,SAA2B;AAAA,QAAd/B,OAAc,SAAdA,OAAc;AACrD,QAAMsB,KAAK,GAAG5C,QAAQ,KAAKM,iBAAL,GAAyBX,cAAc,EAA7D;AACA,WAAO;AACL2B,MAAAA,OAAO,oBACFA,OADE;AAELgC,QAAAA,aAAa,EAAEV,KAAK,oBAAaA,KAAb,IAAuB;AAFtC;AADF,KAAP;AAMD,GAR0B,CAA3B;AAUA,MAAMW,SAAS,GAAG1D,OAAO,CAAC,iBAAqC;AAAA,QAAlC2D,aAAkC,SAAlCA,aAAkC;AAAA,QAAnBC,YAAmB,SAAnBA,YAAmB;AAC7D5C,IAAAA,OAAO,CAAC6C,GAAR,CAAYF,aAAZ;AACA3C,IAAAA,OAAO,CAAC6C,GAAR,CAAYD,YAAZ;AACD,GAHwB,CAAzB;AAKA,SAAO,IAAIrE,YAAJ,CAAiB;AACtBuE,IAAAA,OAAO,OADe;AACkB;AACxCC,IAAAA,IAAI,EAAE9D,UAAU,CAAC+D,IAAX,CAAgB,CAACpB,WAAD,EAAcW,QAAd,EAAwBG,SAAxB,EAAmChB,QAAnC,CAAhB,CAFgB;AAGtBL,IAAAA,KAAK,EAAE,IAAI7C,aAAJ,GAAoByE,OAApB,CAA4BxB,YAA5B,CAHe;AAItByB,IAAAA,iBAAiB,EAAE;AAJG,GAAjB,CAAP;AAMD","sourcesContent":["import React from \"react\";\nimport Head from \"next/head\";\nimport { ApolloClient } from \"apollo-client\";\nimport ws from 'ws';\nimport { InMemoryCache, NormalizedCacheObject } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport fetch from \"isomorphic-unfetch\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport jwtDecode from \"jwt-decode\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from \"apollo-link\";\nimport { WebSocketLink } from 'apollo-link-ws';\nimport cookie from \"cookie\";\n\nconst isServer = () => typeof window === \"undefined\";\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent: any, { ssr = true } = {}) {\n  const WithApollo = ({\n    apolloClient,\n    serverAccessToken,\n    apolloState,\n    ...pageProps\n  }: any) => {\n    if (!isServer() && !getAccessToken()) {\n      setAccessToken(serverAccessToken);\n    }\n    const client = apolloClient || initApolloClient(apolloState);\n    return <PageComponent {...pageProps} apolloClient={client} />;\n  };\n  if (process.env.NODE_ENV !== \"production\") {\n    // Find correct display name\n    const displayName =\n      PageComponent.displayName || PageComponent.name || \"Component\";\n\n    // Warn if old way of installing apollo is used\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    }\n\n    // Set correct display name for devtools\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async (ctx: any) => {\n      const {\n        AppTree,\n        ctx: { req, res }\n      } = ctx;\n\n      let serverAccessToken = \"\";\n\n      if (isServer()) {\n        // const cookies : any = cookie.parse(`${req.headers.cookie}`);\n        // if (cookies.jid) {\n        //   const response = await fetch(IS_PRODUCTION ? `${API_PRODUCTION}/refresh_token` : `${API_DEVELOPMENT}/refresh_token`, {\n        //     method: \"POST\",\n        //     credentials: \"include\",\n        //     headers: {\n        //       cookie: \"jid=\" + cookies.jid\n        //     }\n        //   });\n        //   const data = await response.json();\n        //   serverAccessToken = data.accessToken;\n        // }\n\n        const cookies: any = cookie.parse(`${req.headers.cookie}`);\n        if (cookies.jid) {\n          const response = await fetch(`http://localhost:3000/refresh_token`, {\n            method: \"POST\",\n            credentials: \"include\",\n            headers: {\n              cookie: \"jid=\" + cookies.jid,\n            }\n          });\n          const data = await response.json();\n          serverAccessToken = data.accessToken;\n        }\n      }\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apolloClient = (ctx.ctx.apolloClient = initApolloClient(\n        {},\n        serverAccessToken\n      ));\n\n      const pageProps = PageComponent.getInitialProps\n        ? await PageComponent.getInitialProps(ctx)\n        : {};\n\n      // Only on the server\n      if (typeof window === \"undefined\") {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (res && res.finished) {\n          return {};\n        }\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient\n                }}\n                apolloClient={apolloClient}\n              />\n            );\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        apolloState,\n        serverAccessToken\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\nlet apolloClient: ApolloClient<NormalizedCacheObject> | null = null;\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\nfunction initApolloClient(initState: any, serverAccessToken?: string) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (isServer()) {\n    return createApolloClient(initState, serverAccessToken);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    // setAccessToken(cookie.parse(document.cookie).test);\n    apolloClient = createApolloClient(initState);\n  }\n\n  return apolloClient;\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\nfunction createApolloClient(initialState = {}, serverAccessToken?: string) {\n  const httpLink = new HttpLink({\n    uri: 'http://localhost:3000/api',\n    credentials: \"include\",\n    fetch,\n  });\n\n  const refreshLink = new TokenRefreshLink({\n    accessTokenField: \"accessToken\",\n    isTokenValidOrUndefined: () => {\n      const token = getAccessToken();\n\n      if (!token) {\n        return true;\n      }\n\n      try {\n        const { exp } = jwtDecode(token);\n        if (Date.now() >= exp * 1000) {\n          return false;\n        } else {\n          return true;\n        }\n      } catch {\n        return false;\n      }\n    },\n    fetchAccessToken: () => {\n      return fetch(`http://localhost:3000/api`, {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n    },\n    handleFetch: accessToken => {\n      setAccessToken(accessToken);\n    },\n    handleError: err => {\n      console.warn(\"Your refresh token is invalid. Try to relogin\");\n      console.error(err);\n    }\n  });\n\n  const authLink = setContext((_request, { headers }) => {\n    const token = isServer() ? serverAccessToken : getAccessToken();\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `bearer ${token}` : \"\",\n      }\n    };\n  });\n\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\n    console.log(graphQLErrors);\n    console.log(networkError);\n  });\n\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\", // Disables forceFetch on the server (so queries are only run once)\n    link: ApolloLink.from([refreshLink, authLink, errorLink, httpLink]),\n    cache: new InMemoryCache().restore(initialState),\n    connectToDevTools: true,\n  });\n}"]},"metadata":{},"sourceType":"module"}