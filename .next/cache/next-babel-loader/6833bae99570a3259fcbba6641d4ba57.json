{"ast":null,"code":"import { makeSchema, objectType, stringArg, asNexusMethod } from 'nexus';\nimport { GraphQLDate } from 'graphql-iso-date';\nimport { PrismaClient } from '@prisma/client';\nimport { graphql } from 'graphql';\nimport path from 'path';\nexport const GQLDate = asNexusMethod(GraphQLDate, 'date');\nconst prisma = new PrismaClient();\nconst User = objectType({\n  name: 'User',\n\n  definition(t) {\n    t.string('id');\n    t.string('name');\n    t.string('email');\n    t.list.field('posts', {\n      type: 'Post',\n      resolve: parent => prisma.user.findOne({\n        where: {\n          id: Number(parent.id)\n        }\n      }).posts()\n    });\n  }\n\n});\nconst Post = objectType({\n  name: 'Post',\n\n  definition(t) {\n    t.string('id');\n    t.date('createdAt');\n    t.date('updatedAt');\n    t.string('title');\n    t.string('content', {\n      nullable: true\n    });\n    t.boolean('published');\n    t.field('author', {\n      type: 'User',\n      nullable: true,\n      resolve: parent => prisma.post.findOne({\n        where: {\n          id: Number(parent.id)\n        }\n      }).author()\n    });\n  }\n\n});\nconst Query = objectType({\n  name: 'Query',\n\n  definition(t) {\n    t.field('post', {\n      type: 'Post',\n      args: {\n        postId: stringArg({\n          nullable: false\n        })\n      },\n      resolve: (_, args) => {\n        return prisma.post.findOne({\n          where: {\n            id: Number(args.postId)\n          }\n        });\n      }\n    });\n    t.list.field('feed', {\n      type: 'Post',\n      resolve: (_parent, _args, ctx) => {\n        return prisma.post.findMany({\n          where: {\n            published: true\n          }\n        });\n      }\n    });\n    t.list.field('drafts', {\n      type: 'Post',\n      resolve: (_parent, _args, ctx) => {\n        return prisma.post.findMany({\n          where: {\n            published: false\n          }\n        });\n      }\n    });\n    t.list.field('filterPosts', {\n      type: 'Post',\n      args: {\n        searchString: stringArg({\n          nullable: true\n        })\n      },\n      resolve: (_, {\n        searchString\n      }, ctx) => {\n        return prisma.post.findMany({\n          where: {\n            OR: [{\n              title: {\n                contains: searchString\n              }\n            }, {\n              content: {\n                contains: searchString\n              }\n            }]\n          }\n        });\n      }\n    });\n  }\n\n});\nconst Mutation = objectType({\n  name: 'Mutation',\n\n  definition(t) {\n    t.field('signupUser', {\n      type: 'User',\n      args: {\n        name: stringArg(),\n        email: stringArg({\n          nullable: false\n        })\n      },\n      resolve: (_, {\n        name,\n        email\n      }, ctx) => {\n        return prisma.user.create({\n          data: {\n            name,\n            email\n          }\n        });\n      }\n    });\n    t.field('deletePost', {\n      type: 'Post',\n      nullable: true,\n      args: {\n        postId: stringArg()\n      },\n      resolve: (_, {\n        postId\n      }, ctx) => {\n        return prisma.post.delete({\n          where: {\n            id: Number(postId)\n          }\n        });\n      }\n    });\n    t.field('createDraft', {\n      type: 'Post',\n      args: {\n        title: stringArg({\n          nullable: false\n        }),\n        content: stringArg(),\n        authorEmail: stringArg()\n      },\n      resolve: (_, {\n        title,\n        content,\n        authorEmail\n      }, ctx) => {\n        return prisma.post.create({\n          data: {\n            title,\n            content,\n            published: false,\n            author: {\n              connect: {\n                email: authorEmail\n              }\n            }\n          }\n        });\n      }\n    });\n    t.field('publish', {\n      type: 'Post',\n      nullable: true,\n      args: {\n        postId: stringArg()\n      },\n      resolve: (_, {\n        postId\n      }, ctx) => {\n        return prisma.post.update({\n          where: {\n            id: Number(postId)\n          },\n          data: {\n            published: true\n          }\n        });\n      }\n    });\n  }\n\n});\nexport const schema = makeSchema({\n  types: [Query, Mutation, Post, User, GQLDate],\n  outputs: {\n    typegen: path.join(__dirname, 'nexus-typegen.ts'),\n    schema: path.join(__dirname, 'schema.graphql')\n  }\n});\nexport default (async (req, res) => {\n  console.log('111');\n  const query = req.body.query;\n  const variables = req.body.variables;\n  const response = await graphql(schema, query, {}, {}, variables);\n  return res.end(JSON.stringify(response));\n});","map":{"version":3,"sources":["/Users/leejahun/practice/airbnb-v2/pages/api/index.ts"],"names":["makeSchema","objectType","stringArg","asNexusMethod","GraphQLDate","PrismaClient","graphql","path","GQLDate","prisma","User","name","definition","t","string","list","field","type","resolve","parent","user","findOne","where","id","Number","posts","Post","date","nullable","boolean","post","author","Query","args","postId","_","_parent","_args","ctx","findMany","published","searchString","OR","title","contains","content","Mutation","email","create","data","delete","authorEmail","connect","update","schema","types","outputs","typegen","join","__dirname","req","res","console","log","query","body","variables","response","end","JSON","stringify"],"mappings":"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","sourcesContent":["import { makeSchema, objectType, stringArg, asNexusMethod } from 'nexus'\nimport { GraphQLDate } from 'graphql-iso-date'\nimport { PrismaClient } from '@prisma/client'\nimport { graphql } from 'graphql'\nimport path from 'path'\n\nexport const GQLDate = asNexusMethod(GraphQLDate, 'date')\n\nconst prisma = new PrismaClient()\n\nconst User = objectType({\n  name: 'User',\n  definition(t) {\n    t.string('id')\n    t.string('name')\n    t.string('email')\n    t.list.field('posts', {\n      type: 'Post',\n      resolve: parent =>\n        prisma.user\n          .findOne({\n            where: { id: Number(parent.id) },\n          })\n          .posts(),\n    })\n  },\n})\n\nconst Post = objectType({\n  name: 'Post',\n  definition(t) {\n    t.string('id')\n    t.date('createdAt')\n    t.date('updatedAt')\n    t.string('title')\n    t.string('content', {\n      nullable: true,\n    })\n    t.boolean('published')\n    t.field('author', {\n      type: 'User',\n      nullable: true,\n      resolve: parent =>\n        prisma.post\n          .findOne({\n            where: { id: Number(parent.id) },\n          })\n          .author(),\n    })\n  },\n})\n\nconst Query = objectType({\n  name: 'Query',\n  definition(t) {\n    t.field('post', {\n      type: 'Post',\n      args: {\n        postId: stringArg({ nullable: false }),\n      },\n      resolve: (_, args) => {\n        return prisma.post.findOne({\n          where: { id: Number(args.postId) },\n        })\n      },\n    })\n\n    t.list.field('feed', {\n      type: 'Post',\n      resolve: (_parent, _args, ctx) => {\n        return prisma.post.findMany({\n          where: { published: true },\n        })\n      },\n    })\n\n    t.list.field('drafts', {\n      type: 'Post',\n      resolve: (_parent, _args, ctx) => {\n        return prisma.post.findMany({\n          where: { published: false },\n        })\n      },\n    })\n\n    t.list.field('filterPosts', {\n      type: 'Post',\n      args: {\n        searchString: stringArg({ nullable: true }),\n      },\n      resolve: (_, { searchString }, ctx) => {\n        return prisma.post.findMany({\n          where: {\n            OR: [\n              { title: { contains: searchString } },\n              { content: { contains: searchString } },\n            ],\n          },\n        })\n      },\n    })\n  },\n})\n\nconst Mutation = objectType({\n  name: 'Mutation',\n  definition(t) {\n    t.field('signupUser', {\n      type: 'User',\n      args: {\n        name: stringArg(),\n        email: stringArg({ nullable: false }),\n      },\n      resolve: (_, { name, email }, ctx) => {\n        return prisma.user.create({\n          data: {\n            name,\n            email,\n          },\n        })\n      },\n    })\n\n    t.field('deletePost', {\n      type: 'Post',\n      nullable: true,\n      args: {\n        postId: stringArg(),\n      },\n      resolve: (_, { postId }, ctx) => {\n        return prisma.post.delete({\n          where: { id: Number(postId) },\n        })\n      },\n    })\n\n    t.field('createDraft', {\n      type: 'Post',\n      args: {\n        title: stringArg({ nullable: false }),\n        content: stringArg(),\n        authorEmail: stringArg(),\n      },\n      resolve: (_, { title, content, authorEmail }, ctx) => {\n        return prisma.post.create({\n          data: {\n            title,\n            content,\n            published: false,\n            author: {\n              connect: { email: authorEmail },\n            },\n          },\n        })\n      },\n    })\n\n    t.field('publish', {\n      type: 'Post',\n      nullable: true,\n      args: {\n        postId: stringArg(),\n      },\n      resolve: (_, { postId }, ctx) => {\n        return prisma.post.update({\n          where: { id: Number(postId) },\n          data: { published: true },\n        })\n      },\n    })\n  },\n})\n\nexport const schema = makeSchema({\n  types: [Query, Mutation, Post, User, GQLDate],\n  outputs: {\n    typegen: path.join(__dirname, 'nexus-typegen.ts'),\n    schema: path.join(__dirname, 'schema.graphql')\n  },\n})\n\nexport default async (req, res) => {\n  console.log('111');\n  const query = req.body.query\n  const variables = req.body.variables\n  const response = await graphql(schema, query, {}, {}, variables)\n  return res.end(JSON.stringify(response))\n}"]},"metadata":{},"sourceType":"module"}